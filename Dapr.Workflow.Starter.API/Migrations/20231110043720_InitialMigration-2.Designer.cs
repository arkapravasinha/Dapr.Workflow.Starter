// <auto-generated />
using System;
using Dapr.Workflow.Starter.API.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dapr.Workflow.Starter.API.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20231110043720_InitialMigration-2")]
    partial class InitialMigration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("Dapr.Workflow.Starter.API.DataAccess.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 11, 10, 10, 7, 20, 795, DateTimeKind.Local).AddTicks(9260),
                            ProductId = 1,
                            UpdatedTime = new DateTime(2023, 11, 10, 10, 7, 20, 795, DateTimeKind.Local).AddTicks(9272),
                            stock = 10
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 11, 10, 10, 7, 20, 795, DateTimeKind.Local).AddTicks(9274),
                            ProductId = 2,
                            UpdatedTime = new DateTime(2023, 11, 10, 10, 7, 20, 795, DateTimeKind.Local).AddTicks(9274),
                            stock = 10
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 11, 10, 10, 7, 20, 795, DateTimeKind.Local).AddTicks(9275),
                            ProductId = 3,
                            UpdatedTime = new DateTime(2023, 11, 10, 10, 7, 20, 795, DateTimeKind.Local).AddTicks(9276),
                            stock = 10
                        });
                });

            modelBuilder.Entity("Dapr.Workflow.Starter.API.DataAccess.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Actual_Cost")
                        .HasColumnType("REAL");

                    b.Property<int>("PaymentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Tax")
                        .HasColumnType("REAL");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Dapr.Workflow.Starter.API.DataAccess.Models.PaymentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("Dapr.Workflow.Starter.API.DataAccess.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("UnitCost")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductDescription = "Pen that marks",
                            ProductName = "Mark O Pen",
                            UnitCost = 10.99
                        },
                        new
                        {
                            Id = 2,
                            ProductDescription = "Gel that marks",
                            ProductName = "Mark O Gel",
                            UnitCost = 10.99
                        },
                        new
                        {
                            Id = 3,
                            ProductDescription = "Copy that marks",
                            ProductName = "Mark O Copy",
                            UnitCost = 10.99
                        });
                });

            modelBuilder.Entity("Dapr.Workflow.Starter.API.DataAccess.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "aps1@aps.com",
                            Name = "Arkaprava Sinha1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "aps2@aps.com",
                            Name = "Arkaprava Sinha2"
                        },
                        new
                        {
                            Id = 3,
                            Email = "aps3@aps.com",
                            Name = "Arkaprava Sinha3"
                        });
                });

            modelBuilder.Entity("Dapr.Workflow.Starter.API.DataAccess.Models.Inventory", b =>
                {
                    b.HasOne("Dapr.Workflow.Starter.API.DataAccess.Models.Product", "Product")
                        .WithOne("Inventory")
                        .HasForeignKey("Dapr.Workflow.Starter.API.DataAccess.Models.Inventory", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Dapr.Workflow.Starter.API.DataAccess.Models.Order", b =>
                {
                    b.HasOne("Dapr.Workflow.Starter.API.DataAccess.Models.PaymentDetails", "PaymentDetails")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dapr.Workflow.Starter.API.DataAccess.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dapr.Workflow.Starter.API.DataAccess.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentDetails");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dapr.Workflow.Starter.API.DataAccess.Models.Product", b =>
                {
                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Dapr.Workflow.Starter.API.DataAccess.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
